<?xml version="1.0" encoding="utf-8"?>
<vw:_InternalView xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s ="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx"
				  xmlns:vw="editor.views.*"
				  xmlns:sh="editor.views.sheets.*"
				  width="100%" height="100%" mouseEnabled="false">

	<s:BorderContainer left="0" right="0" height="100%" id="container"
					   backgroundAlpha="0" mouseEnabled="false">
		
		<s:VGroup width="{container.width}"
				  height="{container.height}"
				  mouseEnabled="false"
				  paddingBottom="5" paddingTop="5"
				  paddingLeft="5" paddingRight="5">
			
			<s:HGroup width="100%" verticalAlign="middle" mouseEnabled="false">
				
				<s:Label paddingLeft="10" paddingTop="5" styleName="title" text="页面"
						 mouseEnabled="false" mouseChildren="false"/>
				
				<s:HGroup width="100%" mouseEnabled="false"
						  horizontalAlign="right" verticalAlign="middle" visible="{isEdit}">
					
					<s:Button width="22" styleName="title" label="+" toolTip="新增页面"
							  skinClass="editor.skins.ButtonNormalSkin"
							  click="add_clickHandler(event)"/>
					
					<s:Button width="22" styleName="title" label="-" toolTip="删除页面"
							  skinClass="editor.skins.ButtonNormalSkin"
							  click="del_clickHandler(event)"/>
					
				</s:HGroup>
				
			</s:HGroup>
			
			<mx:HRule width="100%" height="1" mouseEnabled="false" mouseChildren="false"/>
			
			<s:Scroller width="100%" height="100%" id="scroller" mouseEnabled="false">
				
				<s:VGroup id="group" gap="0" paddingBottom="10" click="item_clickHandler(event)">
					
					<sh:ADItem sheet="{program.ad}"/>
					
					<sh:PageGroup id="pageGroup" dataProvider="{program.children}"
								  dragEnter="group_dragEnterHandler(event)"
								  dragDrop="group_dragDropHandler(event)"
								  mouseDown="group_mouseDownHandler(event)"/>
					
				</s:VGroup>
				
			</s:Scroller>
			
		</s:VGroup>
		
	</s:BorderContainer>
	
	<fx:Script>
		<![CDATA[
			import editor.controls.Virtual;
			import editor.core.MDVars;
			import editor.core.ed;
			import editor.utils.CommandUtil;
			import editor.views.sheets.PageItem;
			import editor.views.sheets.SheetItem;
			import editor.views.tabs.TitleTab;
			import editor.vos.PLayout;
			import editor.vos.Page;
			import editor.vos.Sheet;
			
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			
			/**
			 * 
			 * 更新视图。
			 * 
			 */
			
			public function update():void
			{
				if (pageGroup) pageGroup.update();
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				doubleClickTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timer_completeHandler);
				scrollerTimer.addEventListener(TimerEvent.TIMER, timer_scrollerHandler);
			}
			
			/**
			 * @private
			 */
			private function doubleClickCheck():void
			{
				doubleClickTimer.reset();
				doubleClickTimer.start();
				doubleClickCount = 1;
			}
			
			/**
			 * @private
			 */
			private function updateScrollDelta():void
			{
				if (scroller.mouseY < 15)
					scrollY =-5 / (scroller.height / group.height);
				else if (scroller.mouseY > scroller.height - 15)
					scrollY = 5 / (scroller.height / group.height);
				else
					scrollY = 0;
				
				if (scroller.mouseX < 15)
					scrollX =-5 / (scroller.width / group.width);
				else if (scroller.mouseX > scroller.width - 15)
					scrollX = 5 / (scroller.width / group.width);
				else
					scrollX = 0;
			}
			
			/**
			 * @private
			 */
			private function startScroll():void
			{
				if(!scrollerTimer.running) scrollerTimer.start();
			}
			
			/**
			 * @private
			 */
			private function stopScroll():void
			{
				if (scrollerTimer.running) scrollerTimer.stop();
			}
			
			/**
			 * @private
			 */
			private function itemDispatchDown($e:MouseEvent):void
			{
				if(!dragStarted)
				{
					dragStarted = true;
					item.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, false, 
						true, $e.localX, $e.localY, null, false, false, false, $e.buttonDown));
				}
			}
			
			
			/**
			 * @private
			 */
			private function item_clickHandler(event:MouseEvent):void
			{
				if(!mouseMoved)
				{
					if (event.target is SheetItem)
					{
						config.selectedComponent = null;
						config.selectedSheet = event.target.sheet;
						var sheetItem:SheetItem = event.target as SheetItem;
						if (config.selectedSheet) 
						{
							if (config.selectedSheet == sheetItem.sheet)
							{
								if (doubleClickCount == 1)
								{
									doubleClickCount = 0;
									CommandUtil.openSheet(sheetItem.sheet);
									addTitle(sheetItem.sheet);
									return;
								}
							}
						}
						doubleClickCheck();
					}
					else
					{
						config.selectedSheet = null;
					}
					
					var page:Page = config.selectedSheet ? config.selectedSheet as Page : null;
				}
			}
			
			/**
			 * @private
			 */
			private function addTitle(sheet:Sheet):void
			{
				var title:TitleTab = new TitleTab;
				if (repeatById(sheet.id))
				{
					var temp:TitleTab = MDVars.instance.titleBar.HG.addElement(title) as TitleTab;
					idObj[temp] = sheet.id;
				}
				MDVars.instance.titleBar.selected = MDVars.instance.titleBar.sheet2Tab(sheet);
			}
			
			/**
			 * @private
			 */
			private function repeatById($id:String):Boolean
			{
				for each (var id:String in idObj)
					if (id == $id) return false;
				return true;
			}
			
			/**
			 * @private
			 */
			private function group_mouseDownHandler($e:MouseEvent):void
			{
				if (isEdit && $e.target is PageItem)
				{
					mouseMoved = dragStarted = false;
					
					item = $e.target as PageItem;
					down.x = mouseX;
					down.y = mouseY;
					
					stage.addEventListener(MouseEvent.MOUSE_MOVE, group_mouseMoveHandler);
					stage.addEventListener(MouseEvent.MOUSE_UP, group_mouseUpHandler);
					item.addEventListener(MouseEvent.MOUSE_DOWN, item_mouseDownHandler);
				}
			}
			
			/**
			 * @private
			 */
			private function group_mouseMoveHandler($e:MouseEvent):void
			{
				if (Point.distance(new Point(mouseX, mouseY), down) > 5)
				{
					
					mouseMoved = true;
					
					startScroll();
					
					itemDispatchDown($e);
				}
			}
			
			/**
			 * @private
			 */
			private function group_mouseUpHandler($e:MouseEvent):void
			{
				stopScroll();
				
				item.removeEventListener(MouseEvent.MOUSE_DOWN, item_mouseDownHandler);
				
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, group_mouseMoveHandler);
				stage.removeEventListener(MouseEvent.MOUSE_UP, group_mouseUpHandler);
			}
			
			/**
			 * @private
			 */
			private function item_mouseDownHandler($e:MouseEvent):void
			{
				item.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, false));
				item.removeEventListener(MouseEvent.MOUSE_DOWN, item_mouseDownHandler);
				
				var source:DragSource = new DragSource;
				source.addData(item.sheet, "page");
				
				var virtual:Virtual = new Virtual;
				virtual.source = item;
				DragManager.doDrag(item, source, $e, virtual);
			}
			
			/**
			 * @private
			 */
			private function group_dragEnterHandler($e:DragEvent):void
			{
				if ($e.dragSource.dataForFormat("page") as Page)
					DragManager.acceptDragDrop($e.currentTarget as UIComponent);
			}
			
			/**
			 * @private
			 */
			private function group_dragDropHandler($e:DragEvent):void
			{
				CommandUtil.altPage($e.dragSource.dataForFormat("page") as Page);
			}
			
			/**
			 * @private
			 */
			private function add_clickHandler(event:MouseEvent):void
			{
				var page:Page = config.selectedSheet ? config.selectedSheet as Page : null;
				CommandUtil.addPage(
					page ? page.parent : null, 
					page ? page.order + 1 : program.children.length);
			}
			
			/**
			 * @private
			 */
			private function del_clickHandler(event:MouseEvent):void
			{
				CommandUtil.delPage(config.selectedSheet as Page);
			}
			
			/**
			 * @private
			 */
			private function timer_completeHandler(event:TimerEvent):void
			{
				doubleClickTimer.stop();
				doubleClickCount = 0;
			}
			
			/**
			 * @private
			 */
			private function timer_scrollerHandler(event:TimerEvent):void
			{
				updateScrollDelta();
				
				if (scroller && scroller.viewport) 
				{
					scroller.viewport.horizontalScrollPosition += scrollX;
					scroller.viewport.verticalScrollPosition   += scrollY;
				}
			}
			
			private function get isEdit():Boolean
			{
				return config.mode == 'edit';
			}
			
			/**
			 * 
			 * 数据源。
			 * 
			 */
			
			[Bindable]
			public function get program():PLayout
			{
				return ed::pageset;
			}
			
			/**
			 * @private
			 */
			public function set program($value:PLayout):void
			{
				ed::pageset = $value;
				
				update();
			}
			
			/**
			 * @private
			 */
			private function get idObj():Object
			{
				return MDVars.instance.titleBar.idObj;
			}
			/**
			 * @private
			 */
			private var item:PageItem;
			
			/**
			 * @private
			 */
			private var down:Point = new Point;
			
			/**
			 * @private
			 */
			private var mouseMoved:Boolean;
			
			/**
			 * @private
			 */
			private var dragStarted:Boolean;
			
			/**
			 * @private
			 */
			private var scrollX:Number = 0;
			
			/**
			 * @private
			 */
			private var scrollY:Number = 0;
			
			/**
			 * @private
			 */
			private var scrollerTimer:Timer = new Timer(33);
			
			/**
			 * @private
			 */
			private var doubleClickCount:uint = 0;
			
			/**
			 * @private
			 */
			
			private var doubleClickTimer:Timer = new Timer(300, 1);
			/**
			 * @private
			 */
			ed var pageset:PLayout;
		]]>
	</fx:Script>
</vw:_InternalView>
