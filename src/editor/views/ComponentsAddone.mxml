<?xml version="1.0" encoding="utf-8"?>
<vw:_InternalView xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s ="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx"
				  xmlns:vw="editor.views.*" width="100%">
	
	<s:BorderContainer left="0" right="0" backgroundAlpha="0"
					   mouseDown="container_mouseDownHandler(event)">
		
		<s:layout>
			
			<s:VerticalLayout paddingLeft="5" paddingRight="5"
							  paddingBottom="5" paddingTop="5"/>
			
		</s:layout>
		
		<s:Label paddingLeft="10" paddingTop="5" styleName="title" text="组件类型"/>
		
		<mx:HRule width="100%" height="1"/>
		
		<s:Group width="100%">
			
			<s:Group id="container" horizontalCenter="0">
				
				<s:layout>
					
					<s:TileLayout id="tile" requestedColumnCount="4"
								  horizontalAlign="center" horizontalGap="0"
								  verticalAlign="top" verticalGap="3"/>
					
				</s:layout>
				
			</s:Group>
			
		</s:Group>
		
	</s:BorderContainer>
	
	<fx:Script>
		<![CDATA[
			
			import editor.controls.Virtual;
			import editor.core.ed;
			import editor.views.components.ComponentTypeItem;
			import editor.vos.ComponentType;
			
			import mx.core.DragSource;
			import mx.managers.DragManager;
			
			
			/**
			 * 
			 * 更新视图。
			 * 
			 */
			
			public function update():void
			{
				container.removeAllElements();
				
				var count:uint = 0;
				for each (var item:ComponentType in dataProvider)
				{
					count ++;
					var componentTypeItem:ComponentTypeItem = new ComponentTypeItem;
					componentTypeItem.componentType = item;
					container.addElement(componentTypeItem);
				}
			}
			
			
			/**
			 * @private
			 */
			private function container_mouseDownHandler($e:MouseEvent):void
			{
				if ($e.target is ComponentTypeItem)
				{
					item = $e.target as ComponentTypeItem;
					down.x = mouseX;
					down.y = mouseY;
					stage.addEventListener(MouseEvent.MOUSE_MOVE, container_mouseMoveHandler);
					stage.addEventListener(MouseEvent.MOUSE_UP, container_mouseUpHandler);
					
					item.addEventListener(MouseEvent.MOUSE_DOWN, item_mouseDownHandler);
				}
			}
			
			/**
			 * @private
			 */
			private function container_mouseMoveHandler($e:MouseEvent):void
			{
				if (Point.distance(new Point(mouseX, mouseY), down) > 5)
				{
					container_mouseUpHandler(null);
					
					item.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, false, 
						true, $e.localX, $e.localY, null, false, false, false, $e.buttonDown));
				}
			}
			
			/**
			 * @private
			 */
			private function container_mouseUpHandler($e:MouseEvent):void
			{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, container_mouseMoveHandler);
				stage.removeEventListener(MouseEvent.MOUSE_UP, container_mouseUpHandler);
			}
			
			/**
			 * @private
			 */
			private function item_mouseDownHandler($e:MouseEvent):void
			{
				item.removeEventListener(MouseEvent.MOUSE_DOWN, item_mouseDownHandler);
				item.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP));
				
				var source:DragSource = new DragSource;
				source.addData(item.componentType, "componentType");
				
				var virtual:Virtual = new Virtual;
				virtual.source = item;
				
				DragManager.doDrag(
					 item, source, $e, virtual, 
					-item.mouseX + item.width * .5,
					-item.mouseY + item.height * .5);
			}
			
			
			/**
			 * 
			 * 数据源
			 * 
			 */
			
			public function get dataProvider():Object
			{
				return ed::dataProvider;
			}
			
			/**
			 * @private
			 */
			public function set dataProvider($value:Object):void
			{
				ed::dataProvider = $value;
				
				update();
			}
			
			
			/**
			 * @private
			 */
			private var down:Point = new Point;
			
			/**
			 * @private
			 */
			private var item:ComponentTypeItem;
			
			
			/**
			 * @private
			 */
			ed var dataProvider:Object;
			
		]]>
	</fx:Script>
	
</vw:_InternalView>
