<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:ct="editor.controls.*"
		  verticalAlign="middle" height="23"
		  mouseEnabled="false">
	
	<s:states>
		<s:State name="text"/>
		<s:State name="bool"/>
		<s:State name="color"/>
		<s:State name="link"/>
		<s:State name="index"/>
		<s:State name="combo"/>
		<s:State name="pageBtn"/>
	</s:states>

	<s:Label paddingTop="3" styleName="property" text="{label}"/>
	
	<ct:MDTextInput id="input" width="100%" includeIn="text" verticalCenter="-2"
					styleName="normal" text="{value}" restrict="{restrict}"
					enter="text_changeHandler(event)"
					change="input_changeHandler(event)"
					focusOut="text_changeHandler(event)"/>
	
	<s:CheckBox id="check" includeIn="bool"
				selected="{value}" verticalCenter="-2"
				skinClass="editor.skins.EditorCheckBoxSkin"
				change="check_changeHandler(event)"/>
	
	<s:ComboBox id="combo" includeIn="combo" labelField="label" 
				width="100%" verticalCenter="-2" 
				dataProvider="{comboProvider}"
				selectedIndex="{comboChange(value as String)}"
				skinClass="editor.skins.EditorComboBoxSkin"
				change="combo_changeHandler(event)"/>
	
	<mx:ColorPicker id="picker" includeIn="color" verticalCenter="-2"
					selectedColor="{ColorUtil.colorString2uint(value as String)}"
					change="picker_changeHandler(event)"/>
	
	<s:Button includeIn="link" verticalCenter="-2"
			  label="{value ? value.label : '选择'}"
			  skinClass="editor.skins.ButtonNormalSkin"
			  click="page_selectHandler(event)"/>
	
	<s:Button includeIn="link" verticalCenter="-2"
			  label="清除" visible="{Boolean(value)}"
			  skinClass="editor.skins.ButtonNormalSkin"
			  click="page_clearHandler(event)"/>
	
	<s:Button includeIn="index" verticalCenter="-2" label="设为首页"
			  skinClass="editor.skins.ButtonNormalSkin"
			  click="page_setIndexHandler(event)"/>
	
	<s:Button includeIn="pageBtn" verticalCenter="-2" label="填充"
			  skinClass="editor.skins.ButtonNormalSkin"
			  click="pageBtn_clickHandler(event)"/>
	
	<fx:Metadata>
		
		/**
		 * 
		 * 当属性的值改变时派发此事件。
		 * 
		 */
		
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import cn.mvc.utils.ColorUtil;
			
			import editor.utils.ComponentUtil;
			
			import mx.collections.ArrayCollection;
			import mx.events.ColorPickerEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			
			/**
			 * 
			 * 改变值。
			 * 
			 */
			
			public function changeValue($value:Object, $dispatch:Boolean = true):void
			{
				if (value != $value)
				{
					value = $value;
					
					if ($dispatch) dispatchEvent(new Event(Event.CHANGE));
				}
			}
			
			/**
			 * @private
			 */
			private function comboChange($value:String):int
			{
				var i:int = -1, l:int;
				if (combo)
				{
					l = combo.dataProvider.length;
					for (i = l - 1; i >= 0; i--)
						if (combo.dataProvider[i].value == $value) break;
				}
				return i;
			}
			
			
			/**
			 * @private
			 */
			private function text_changeHandler($e:Event):void
			{
				if (String(value) != input.text)
				{
					value = input.text;
					
					dispatchEvent(new Event(Event.CHANGE));
				}
			}
			
			/**
			 * @private
			 */
			private function check_changeHandler($e:Event):void
			{
				if (Boolean(value) != check.selected)
				{
					value = check.selected;
					
					dispatchEvent($e.clone());
				}
			}
			
			/**
			 * @private
			 */
			private function picker_changeHandler(event:ColorPickerEvent):void
			{
				if (String(value) != ColorUtil.colorUint2String(picker.selectedColor))
				{
					value = ColorUtil.colorUint2String(picker.selectedColor);
					
					dispatchEvent(new Event(Event.CHANGE));
				}
			}
			
			/**
			 * @private
			 */
			private function combo_changeHandler(event:IndexChangeEvent):void
			{
				var result:* = combo.selectedItem["value"];
				if (result != value)
				{
					value = result;
					
					dispatchEvent(new Event(Event.CHANGE));
				}
			}
			
			/**
			 * @private
			 */
			private function page_selectHandler(event:MouseEvent):void
			{
				ComponentUtil.showPageSelector(this);
			}
			
			/**
			 * @private
			 */
			private function page_clearHandler(event:MouseEvent):void
			{
				if (value)
				{
					value = null;
					
					dispatchEvent(new Event(Event.CHANGE));
				}
			}
			
			/**
			 * @private
			 */
			private function page_setIndexHandler($e:Event):void
			{
				value = true;
				
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			
			protected function pageBtn_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(Event.CHANGE));
			}
			/**
			 * 
			 * 字符输入限制。
			 * 
			 */
			
			[Bindable]
			public var restrict:String;
			
			
			/**
			 * 
			 * 下拉框的数据提供源。
			 * 
			 */
			[Bindable]
			public var comboProvider:ArrayCollection;
			
			
			/**
			 * 
			 * 标签。
			 * 
			 */
			
			[Bindable]
			public var label:String;
			
			
			/**
			 * 
			 * 要修改的属性名。
			 * 
			 */
			
			[Bindable]
			public var property:String;
			
			
			/**
			 * 
			 * 属性的值。
			 * 
			 */
			
			[Bindable]
			public var value:Object;
			
			
			
			/**
			 * 
			 * 宿主。
			 * 
			 */
			
			public var host:Object;
			
			private const inputNumLimit:uint  = 4;
			private const inputTextLimit:uint = 30;
			public function input_changeHandler(event:TextOperationEvent):void
			{
				if (property != "waitTime")
				{
					if (property != "label" && input.text.length > inputNumLimit) 
						input.text = input.text.substr(0, inputNumLimit);
					else if (property == "label" && input.text.length > inputTextLimit) 
						input.text = input.text.substr(0, inputTextLimit);
				}
			}
			
		]]>
	</fx:Script>
	
</s:HGroup>
