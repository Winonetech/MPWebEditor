<?xml version="1.0" encoding="utf-8"?>
<vw:_InternalView xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s ="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx"
				  xmlns:vw="editor.views.*"
				  xmlns:cs="editor.views.canvas.*"
				  width="100%" height="100%">
	
	<s:BorderContainer left="0" right="0" top="0" bottom="0" 
					   backgroundAlpha="0">
		<!-- 该Group是整个的边框 即放置viewer的地方 -->
		<s:Group left="5" right="5" top="5" bottom="5"
				 clipAndEnableScrolling="true" id="container"
				 resize="canvas_resizeHandler(event)">
			<!-- 该Viewer是存放组件、网格等CanvasContent的地方 -->
			<cs:Viewer id="viewer" 
					   alignMode="{config.alignMode}"
					   dragOnly ="{config.dragOnly}"
					   showGrid ="{config.showGrid}"/>
			<!-- 该Group用于存放ToolSelect ToolSelect是被选择的边框 -->
			<s:Group width ="{viewer.width}"
					 height="{viewer.height}"
					 x="{viewer.x}" 
					 mouseEnabled="false"
					 clipAndEnableScrolling="true">
				<cs:ToolSelect id="selector" viewer="{viewer}"
							   visible="{(config.isLayoutOpened || config.editingSheet) &amp;&amp; selectedComponent}"
							   selectedItem="{content.selectedItem}"/>
				
			</s:Group>
			
		</s:Group>
		
	</s:BorderContainer>
	
	<fx:Script>
		<![CDATA[
			
			import editor.core.MDVars;
			import editor.core.ed;
			import editor.views.components.CanvasItem;
			import editor.vos.Component;
			import editor.vos.Page;
			import editor.vos.Sheet;
			
			import mx.events.ResizeEvent;
			
			
			/**
			 * 
			 * 更新视图。
			 * 
			 */
			
			public function update():void
			{
				if (!MDVars.instance.titleBar.isLayoutOpened) resizeViewer();
				else resizeLayoutViewer();
				if (content)
				{
					//当在同一个类型(CanvasContent || PageContent)时会进入该区域
					if (content.sheet != sheet)
					{
						// 当同一类型切换时会进入该区域
						content.sheet = sheet;
					}
					else   
					{
						// 当改变当前页面的宽高时会进入该区域
						content.update();
					}
				}
				else
				{
					// 每次切换类型时会进入该方法
					content = config.isLayoutOpened ? new PageContent : new CanvasContent;
					content.sheet = sheet;
				}
				
				if (viewer)
				{
					//viewer.content 是上一个的画布内容！
					//content 是当前的画布内容！
					if (viewer.content != content)
					{
						//在不同类型内切换会进入该区域
						viewer.content = content;
					}
					else
					{
						//在同一类型内切换会进入该区域
						viewer.update();
					}
				}
			}
			
			
			private function resizeLayoutViewer():void
			{
				if (container && viewer)
				{
					var ww:Number = container.width;
					var wh:Number = container.height;
					var cw:Number = 1920;
					var ch:Number = 1080;
					var ws:Number = ww / wh;
					var cs:Number = cw / ch;
					var ss:Number = ws < cs ? ww / cw : wh /ch;
					
					viewer.width  = ss * 1920;
					viewer.height = ss * 1080;
					viewer.x = .5 * (ww - viewer.width);
					
					viewer.update();
				}
			}
			
			/**
			 * 
			 * 更新单个元素。
			 * 
			 */
			
			public function updateComponent($component:Component, $type:uint = 0):CanvasItem
			{
				return content ? (content as CanvasContent).updateComponent($component, $type) : null;
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function createChildren():void
			{
				super.createChildren();
				resizeViewer();
			}
			
			
			
			/**
			 * @private
			 */
			private function resizeViewer():void
			{
				if (container && viewer && sheet)
				{
					//ww wh -> 总容器尺寸
					var ww:Number = container.width;
					var wh:Number = container.height;
					//container的 width和 height不变 
					
					//cw ch -> 页面尺寸
					var cw:Number = sheet.width;
					var ch:Number = sheet.height;
					
					
					var ws:Number = ww / wh;
					var cs:Number = cw / ch;
					
					var ss:Number = ws < cs ? ww / cw : wh /ch;
					
					viewer.width  = ss * sheet.width;
					viewer.height = ss * sheet.height;
					viewer.x = .5 * (ww - viewer.width);
					
					viewer.update();
				}
			}
			
			
			/**
			 * @private
			 */
			private function canvas_resizeHandler(event:ResizeEvent):void
			{
				if (MDVars.instance.titleBar && config.isLayoutOpened)
					resizeLayoutViewer();
				else resizeViewer();
			}
			
			
			/**
			 * 
			 * 选中的元素。
			 * 
			 */
			
			[Bindable]
			public function get selectedComponent():*
			{
				return ed::selectedItem;
			}
			
			/**
			 * @private
			 */
			public function set selectedComponent($value:*):void
			{
				$value = config.isLayoutOpened ? $value as Page : $value as Component; 
				ed::selectedItem = $value;
				if (content) content.selectedComponent = selectedComponent;
			}
			
			
			/**
			 * 
			 * 版面数据。
			 * 
			 */
			
			public function get sheet():Sheet
			{
				return ed::sheet;
			}
			
			/**
			 * @private
			 */
			public function set sheet($value:Sheet):void
			{
				ed::sheet = $value;
				update();
			}
			
			
			/**
			 * @private
			 */
			[Bindable]
			private var _content:*;
			
			private function set content(value:*):void
			{
				if (value is CanvasContent) _content = value as CanvasContent;
				else if (value is PageContent) _content = value as PageContent;
				else _content = null;
			}
			
			[Bindable]
			public function get content():*
			{
				return (!MDVars.instance.titleBar.isLayoutOpened) 
				? _content as CanvasContent : _content as PageContent;
			}
			
			
			/**
			 * @private
			 */
			ed var selectedItem:*;
			
			/**
			 * @private
			 */
			ed var sheet:Sheet;
			
			
		]]>
	</fx:Script>
	
</vw:_InternalView>
