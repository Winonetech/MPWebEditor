<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="30" mouseChildren="false"
		 mouseOver="item_defaultHandler(event)"
		 mouseOut="item_defaultHandler(event)"
		 mouseDown="item_defaultHandler(event)"
		 mouseUp="item_defaultHandler(event)"
		 dragEnter="item_dragEnterHandler(event)"
		 dragDrop="item_dragDropHandler(event)">
	
	<mx:HRule top="0" height="1" width="100%" id="topRule" visible="false"/>
	
	<mx:HRule bottom="0" height="1" width="100%" id="bottomRule" visible="false"/>
	
	<s:Rect width="100%" height="100%" radiusX="3" radiusY="3">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="{backgroundAlpha}"/>
		</s:fill>
	</s:Rect>
	
	
	<s:Label verticalCenter="1" color="{selected ? 0xFF0000 : 0xFFFFFF}" styleName="normal" text="{component.label}" paddingLeft="10" width="100%"/>
	
	<fx:Script>
		<![CDATA[
			
			import editor.core.MDConfig;
			import editor.core.ed;
			import editor.utils.CommandUtil;
			import editor.vos.Component;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			
			/**
			 * @inheritDoc
			 */
			override protected function createChildren():void
			{
				super.createChildren();
				
				BindingUtils.bindProperty(this, "selected", component, "selected");
			}
			
			
			/**
			 * @private
			 */
			private function updateBackgroundAlpha($state:String = null):void
			{
				if ($state) state = $state;
				
				backgroundAlpha = interactiveAlphas[state][uint(selected)];
			}
			
			
			/**
			 * @private
			 */
			private function item_defaultHandler($e:MouseEvent):void
			{
				updateBackgroundAlpha($e.type);
			}
			
			/**
			 * @private
			 */
			private function item_dragEnterHandler($e:DragEvent):void
			{
				var c:Component = $e.dragSource.dataForFormat("component") as Component;
				var i:ComponentListItem = $e.target as ComponentListItem
				var f:Component =i.component;
				if (c && f && c != f)
				{
					DragManager.acceptDragDrop(i);
					dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
					stager = stage;
					stager.addEventListener(MouseEvent.MOUSE_MOVE, item_mouseMoveHandler);
				}
			}
			
			/**
			 * @private
			 */
			private function item_dragDropHandler($e:DragEvent):void
			{
				bottomRule.visible = topRule.visible = false;
				var c:Component = $e.dragSource.dataForFormat("component") as Component;
				var f:Component = ($e.target as ComponentListItem).component;
				trace("f -> " + f.order + " c -> " + c.order);
				var o:uint = f.order >= c.order
					?(mouseY < 15 ? f.order : Math.max(f.order - 1, 0))
					:(mouseY < 15 ? f.order + 1: f.order);
				if (c && f) CommandUtil.ordComponent(c, o);
			}
			
			/**
			 * @private
			 */
			private function item_mouseMoveHandler($e:MouseEvent):void
			{
				if (mouseX < 0 || mouseX > width || mouseY < 0 || mouseY > height)
				{
					stager.removeEventListener(MouseEvent.MOUSE_MOVE, item_mouseMoveHandler);
					stager = null;
					bottomRule.visible = topRule.visible = false;
					dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));
				}
				else
				{
					bottomRule.visible = !(topRule.visible = mouseY < 15);
				}
			}
			
			
			/**
			 * 
			 * 是否被选择。
			 * 
			 */
			
			[Bindable]
			public function get selected():Boolean
			{
				return ed::selected as Boolean;
			}
			
			/**
			 * @private
			 */
			public function set selected($value:Boolean):void
			{
				if (selectable)
				{
					ed::selected = $value;
					
					updateBackgroundAlpha();
				}
			}
			
			
			/**
			 * 
			 * 组件数据。
			 * 
			 */
			
			[Bindable]
			public function get component():Component
			{
				return ed::component;
			}
			
			/**
			 * @private
			 */
			public function set component($value:Component):void
			{
				ed::component = $value;
				
				selected = component.selected;
			}
			
			/**
			 * 
			 * 能否被选中
			 * 
			 */
			
			[Bindable]
			public var selectable:Boolean = true;
			
			
			/**
			 * @private
			 */
			[Bindable]
			private var backgroundAlpha:Number = 0;
			
			
			/**
			 * @private
			 */
			private var state:String = "mouseOut";
			
			
			/**
			 * @private
			 */
			private const interactiveAlphas:Object = {
				mouseUp  : [.1, .6], 
				mouseDown: [.2, .8], 
				mouseOver: [.1, .6], 
				mouseOut : [ 0, .5]
			};
			
			
			/**
			 * @private
			 */
			private var config:MDConfig = MDConfig.instance;
			
			/**
			 * @private
			 */
			private var stager:Stage;
			
			
			/**
			 * @private
			 */
			ed var selected:Boolean;
			
			/**
			 * @private
			 */
			ed var component:Component;
			
		]]>
	</fx:Script>
	
</s:Group>
