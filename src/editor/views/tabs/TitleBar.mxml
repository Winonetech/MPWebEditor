<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s ="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:tabs="editor.views.tabs.*"
				   borderAlpha="0.8" minWidth="68"
				   resize="TB_resizeHandler(event)" 
				   height="30" backgroundAlpha="0">
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="much"/>
	</s:states>
	<s:HGroup id="TC" gap="5">
		<s:HGroup gap="5" updateComplete="HG_updateCompleteHandler(event)" resize="HG_resizeHandler(event)" id="HG" >
			<tabs:TitleTab label="布局" layoutCloseVisible="false"/>
		</s:HGroup>
		
		<s:ComboBox id="comboBox" includeIn="much" dataProvider="{dataArrs}"
					skinClass="editor.skins.TitleBarComboboxSkin"
					change="combobox1_changeHandler(event)"/>
	</s:HGroup>
	<fx:Script>
		<![CDATA[
			import editor.core.MDConfig;
			import editor.core.MDProvider;
			import editor.core.MDVars;
			import editor.core.ed;
			import editor.views.Debugger;
			import editor.vos.Sheet;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.states.OverrideBase;
			
			import spark.events.IndexChangeEvent;
			
			
			[Bindable]
			public var dataArrs:ArrayCollection = new ArrayCollection; 
			public var idObj:Object = {};
			
			private function sheet2Tab($sheet:Sheet):TitleTab
			{
				var temp:TitleTab;
				for (var i:int; i < HG.numElements; i++)
				{
					temp = HG.getElementAt(i) as TitleTab	
					if ($sheet.id == idObj[temp])
					{
						return temp; 
					}
				}
				for (var j:int; j < dataArrs.length; j++)
				{
					temp = dataArrs[j];
					if ($sheet.id == idObj[temp])
					{
						return temp;
					}
				}
				return null;
			}
			
			private function tab2Sheet($tab:TitleTab):Sheet
			{
				return MDProvider.instance.program.sheets[idObj[$tab]];
			}
			
			private function updateBackgroundColor():void
			{
				var temp:TitleTab;
				for (var i:int; i < HG.numElements; i++)
				{
					temp = HG.getElementAt(i) as TitleTab;
					if (idObj[temp] != idObj[selected])
					{
						temp.button.visible = false;
						temp.setStyle("backgroundColor", 0xffffff);
					}
					else
					{
						temp.button.visible = true;
						temp.setStyle("backgroundColor", 0);
					}
				}
			}
			
			protected function combobox1_changeHandler(event:IndexChangeEvent):void
			{
				MDConfig.instance.selectedSheet = null;
				var temp:TitleTab = comboBox.selectedItem as TitleTab;
				var tempWidth:Number = HG.width;
				while (temp.width + tempWidth > width - 50)
				{
					var removed:TitleTab = HG.removeElementAt(HG.numElements - 1) as TitleTab;
					var tempNamed:Number = removed.named.width >= 43 ? 43 : removed.named.width;
					tempWidth -= removed.width + tempNamed - 38;
					dataArrs.addItem(removed);
				}
				dataArrs.removeItemAt(comboBox.selectedIndex);
				HG.addElement(temp);
				selected = temp;
			}
			
			private function closed():void
			{
				var temp:TitleTab;
				var tempWidth:Number = HG.width;
				if (dataArrs.length != 0)
				{
					for (var i:int = 0; i < dataArrs.length; i++)
					{
						if (dataArrs[i].width + tempWidth < width - 50)
						{
							temp = HG.addElement(dataArrs[i]) as TitleTab;
							tempWidth += dataArrs[i].width;
							dataArrs.removeItemAt(i);
							updateBackgroundColor();
						}
					}
				}
			}
			
			private function opened():void
			{
				var tempTab:TitleTab;
				var tempNamed:Number;
				var temp:Number = HG.width;
				while (temp > width - 50)
				{
					currentState = "much";
					tempTab = HG.getElementAt(HG.numElements - 2) as TitleTab;
					tempNamed = tempTab.named.width >= 43 ? 43 : tempTab.named.width;
					temp -= tempTab.width + tempNamed - 38;
					dataArrs.addItem(tempTab);
					HG.removeElementAt(HG.numElements - 2);
				}
			}
			
			protected function TB_resizeHandler(event:ResizeEvent):void
			{
				result = event.oldWidth > width ? "small" : "big";
				HG.dispatchEvent(new ResizeEvent(ResizeEvent.RESIZE));
			}
			
			private var result:String;
			
			protected function HG_resizeHandler(event:ResizeEvent):void
			{
				state = result == "big" ? "close" : "open";
				if (state == "close") closed();
				else
				{
					if (count > 1 && count % 2 == 1)
						opened();
					count++;
				}
				result = null;
			}
			
			/**
			 * @private
			 */
			public function addTitle(sheet:Sheet):void
			{
				var title:TitleTab = new TitleTab;
				if (repeatById(sheet.id))
				{
					var temp:TitleTab = HG.addElement(title) as TitleTab;
					idObj[temp] = sheet.id;
				}
				selected = sheet2Tab(sheet);
			}
			
			/**
			 * @private
			 */
			private function repeatById($id:String):Boolean
			{
				for each (var id:String in idObj)
				if (id == $id) return false;
				return true;
			}
			
			private function repeatByTab($tab:TitleTab):Boolean
			{
				for each (var tab:TitleTab in dataArrs)
				if (tab == $tab) return false;
				return true;	
			}
			
			/**
			 * 
			 * 当前正在编辑的页面选项卡。
			 * 
			 */
			
			[Bindable]
			public function get selected():TitleTab
			{
				return ed::selected;
			}
			
			/**
			 * @private
			 */
			public function set selected(value:TitleTab):void
			{
				var temp:Sheet = tab2Sheet(value);
				if (temp)
				{
					MDConfig.instance.editingSheet = MDConfig.instance.selectedSheet = temp;
					ed::selected = value;
					if (!repeatByTab(value))
					{
						var tempWidth:Number = HG.width;
						var tempNamed:Number;
						var removed:TitleTab;
						while (value.width + tempWidth > width - 50)
						{
							removed = HG.removeElementAt(HG.numElements - 1) as TitleTab;
							dataArrs.addItem(removed);
							tempNamed = removed.named.width >= 43 ? 43 : removed.named.width;
							tempWidth -= removed.width + tempNamed - 38;
						}
						dataArrs.removeItemAt(dataArrs.getItemIndex(value));
						HG.addElement(value);
					}
					updateBackgroundColor();
				}
			}
			
			protected function HG_updateCompleteHandler(event:FlexEvent):void
			{
				if (dataArrs.length == 0) currentState = "normal";
			}
			
			/**
			 * @private
			 */
			ed var selected:TitleTab;
			
			/**
			 * 
			 */
			public var border:Number = 40;
			
			public var state:String;
			
			private var oldWidth:Number;
			
			private var count:int = 0;
			
		]]>
	</fx:Script>
	
</s:BorderContainer>
