<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   mouseOut="bordercontainer2_mouseOutHandler(event)"
				   mouseOver="bordercontainer1_mouseOverHandler(event)"
				   click="bordercontainer2_clickHandler(event)"
				   remove="hgroup1_removeHandler(event)" add="hgroup1_addHandler(event)"
				   backgroundAlpha=".1" minWidth="50" height="30">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:states>
		<s:State name="mouseOut"/>
		<s:State name="mouseOver"/>
	</s:states>
	<s:Label id="named" left="5" verticalCenter="0" color="0xFFFFFF" text="{label || selectedSheet.label}"/>
	<s:Button left="{named.x + named.width + 20}" right="5" verticalCenter="0"  id="button" visible="{layoutCloseVisible &amp;&amp; closeVisible}" skinClass="editor.skins.ButtonCloseSkin"/>
	<fx:Script>
		<![CDATA[
			import editor.core.MDConfig;
			import editor.core.MDVars;
			import editor.views.Debugger;
			import editor.vos.Sheet;
			
			import mx.events.FlexEvent;
			
			[Bindable]
			public var label:String;
			
			[Bindable]
			public var selectedSheet:Sheet = MDConfig.instance.editingSheet;
			
			public function get selected():Boolean
			{
				return this == titleBar.selected;
			}
			
			protected function bordercontainer1_mouseOverHandler(event:MouseEvent):void
			{
				currentState = "mouseOver";
				if (layoutCloseVisible) button.visible = true;
			}
			
			protected function bordercontainer2_mouseOutHandler(event:MouseEvent):void
			{
				currentState = "mouseOut";
				if (!selected) button.visible = false;
			}
			
			protected function bordercontainer2_clickHandler(event:MouseEvent):void
			{
				if (event.target is Button) closePage();
				else openPage();
			}
			
			
			private function openPage():void
			{
				titleBar.selected = this;
			}
			
			
			
			private function closePage():void
			{
				delete idObj[this];
				if (this == titleBar.selected)
				{
					var index:uint = titleBar.HG.getElementIndex(this); 
					index = index == (titleBar.HG.numElements - 1) 
						? index - 1 : index + 1;					
					titleBar.selected = titleBar.HG.getElementAt(index) as TitleTab;
				}
				titleBar.HG.removeElement(this);
				if (titleBar.HG.numElements == 1) 
					MDConfig.instance.editingSheet = MDConfig.instance.selectedSheet = null; 
			}
			
			[Bindable]
			public var closeVisible:Boolean = false;
			
			[Bindable]
			public var layoutCloseVisible:Boolean = true;
			
			public function get idObj():Object
			{
				return MDVars.instance.titleBar.idObj;
			}
			
			public function get titleBar():TitleBar
			{
				return MDVars.instance.titleBar;
			}
			
			override public function toString():String
			{
				return this.named.text;
			}
			
			protected function hgroup1_removeHandler(event:FlexEvent):void
			{
				Debugger.log("remove remove remove remove remove remove");
				titleBar.state = "close";
			}
			 
			protected function hgroup1_addHandler(event:FlexEvent):void
			{

				Debugger.log("add add add add add add add add");
				if (titleBar)
					titleBar.state = "open";
			}
		]]>
	</fx:Script>
</s:BorderContainer>
