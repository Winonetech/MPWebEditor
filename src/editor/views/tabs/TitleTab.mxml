<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   borderAlpha=".618" backgroundAlpha=".1"
				   minWidth="50" height="30" 
				   mouseOut="bordercontainer2_mouseOutHandler(event)"
				   mouseOver="bordercontainer1_mouseOverHandler(event)"
				   add="hgroup1_addHandler(event)" remove="hgroup1_removeHandler(event)"
				   click="bordercontainer2_clickHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:states>
		<s:State name="mouseOut"/>
		<s:State name="mouseOver"/>
	</s:states>
	<s:Label id="named" left="5" verticalCenter="0" color="0xFFFFFF" text="{label || selectedSheet.label}"/>
	<s:Button left="{named.x + named.width + 20}" right="5" verticalCenter="0"  id="button" visible="{layoutCloseVisible &amp;&amp; closeVisible}" skinClass="editor.skins.ButtonCloseSkin"/>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import editor.core.MDConfig;
			import editor.core.MDVars;
			import editor.vos.Sheet;
			
			protected function bordercontainer1_mouseOverHandler(event:MouseEvent):void
			{
				currentState = "mouseOver";
				if (layoutCloseVisible) button.visible = true;
			}
			
			protected function bordercontainer2_mouseOutHandler(event:MouseEvent):void
			{
				currentState = "mouseOut";
				if (!selected) button.visible = false;
			}
			
			protected function bordercontainer2_clickHandler(event:MouseEvent):void
			{
				if (event.currentTarget != titleBar.tabLayout)
				{
					if (event.target is Button) closePage();
					else 
					{
						MDConfig.instance.selectedSheet = null;
						titleBar.isLayoutOpened = false;
						openPage();
					}
				}
				else 
				{
					titleBar.isLayoutOpened = true;
				}
			}
			
			public function closePage():void
			{
				if (this == titleBar.selected)
				{
					var index:uint = titleBar.HG.getElementIndex(this); 
					index = index == (titleBar.HG.numElements - 1) 
						? index - 1 : index + 1;
					if (index != 0)
					{
						if (!titleBar.total.containsElement(titleBar.comboBox))
							titleBar.selected = titleBar.HG.getElementAt(index) as TitleTab;
						else titleBar.selected = null;
					}
				}
				
				if (titleBar.HG.containsElement(this)) titleBar.HG.removeElement(this);
				else if (titleBar.dataArrs.contains(this))
				{
					titleBar.dataArrs.removeItemAt(titleBar.dataArrs.getItemIndex(this));
					titleBar.HG.dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
				}
				
				if (titleBar.HG.numElements == 1) 
				{
					if (titleBar.total.containsElement(titleBar.comboBox))
						titleBar.dataArrs[0].dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					else 
						titleBar.tabLayout.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				}
				delete idObj[this.uid];
			}
			
			private function openPage():void
			{
				MDConfig.instance.selectedComponent = null;
				titleBar.selected = this;
			}
			
			protected function hgroup1_removeHandler(event:FlexEvent):void
			{
				if (titleBar) titleBar.state = "close";
			}
			
			protected function hgroup1_addHandler(event:FlexEvent):void
			{
				if (titleBar) titleBar.state = "open";
			}
			
			override public function toString():String
			{
				return this.named.text;
			}
			
			[Bindable]
			public var closeVisible:Boolean = false;
			
			[Bindable]
			public var layoutCloseVisible:Boolean = true;
			
			[Bindable]
			public var label:String;
			
			[Bindable]
			public var selectedSheet:Sheet = MDConfig.instance.editingSheet;
			
			public function get selected():Boolean
			{
				return this == titleBar.selected;
			}
			
			public function get idObj():Object
			{
				return MDVars.instance.titleBar.idObj;
			}
			
			public function get titleBar():TitleBar
			{
				return MDVars.instance.titleBar;
			}
			
			
		]]>
	</fx:Script>
</s:BorderContainer>
